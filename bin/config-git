#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/helper.rb'

DEFAULT_CONFIG = {
  'alias.br' => 'branch',
  'alias.co' => 'checkout',
  'alias.pick' => 'cherry-pick',
  'alias.st' => 'status',
  'alias.when' => 'blame',

  'alias.l1' => 'log --pretty=oneline',
  'alias.lg' => 'log --decorate=short --date-order --graph --date=iso',
  'alias.mm' => 'merge --no-ff',
  'alias.ff' => 'merge --ff-only',
  'alias.amend-new' => 'commit --amend --reset-author',
  'alias.cached' => 'diff --cached',
  'alias.unadd' => 'reset HEAD --',
  'alias.initcommit' => '!git init && git commit -m Init --allow-empty',

  'color.ui' => 'auto',
  'color.diff' => 'auto',
  'color.branch' => 'auto',
  'color.status' => 'auto',

  'core.fileMode' => 'true',
  'core.fsyncObjectFiles' => 'true',
  'core.quotePath' => 'false',

  'diff.renames' => 'copies',

  'push.default' => 'current',
}.freeze

def git_config_value(key)
  output = %x[git config --global --get #{key}]
  $?.exitstatus == 0 ? output.chomp : nil
end

def git_config(key, value)
  if value
    run_command(['git', 'config', '--global', key, value])
  else
    run_command(['git', 'config', '--global', '--unset', key])
  end
end

def main
  configs = DEFAULT_CONFIG.dup

  put_status 'Customising'
  prompt_yn('Edit commit messages with GUI vim?') do |v|
    configs['core.editor'] = v ? 'gvim --nofork' : nil
  end
  prompt_yn('Check integrity when pulling?') do |v|
    configs['transfer.fsckObjects'] = v ? 'true' : nil
  end

  changes = configs.sort.reject do |key, val|
    git_config_value(key) == val
  end
  if changes.empty?
    puts 'No changes'
    return true
  end

  put_status 'Confirming'
  changes.each do |key, val|
    if val
      puts "Set: #{PINK}#{key.shellescape}#{OFF} = #{CYAN}#{val.shellescape}#{OFF}"
    else
      puts "Unset: #{PINK}#{key.shellescape}#{OFF}"
    end
  end
  prompt_yn('Apply this configuration?') do |apply|
    return false unless apply
  end

  put_status 'Applying configuration'
  changes.each do |key, val|
    git_config(key, val)
  end
  true
end

exit(main) if $PROGRAM_NAME == __FILE__
